{
	"name": "v",
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"fileTypes": [
		".tby"
	],
	"scopeName": "source.tby",
	"patterns": [
		{
			"begin": "^\\s*(module)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.module.tby"
				}
			},
			"end": "([0-9a-zA-Z_]*)",
			"endCaptures": {
				"1": {
					"name": "entity.name.module.tby"
				}
			}
		},
		{
			"begin": "^\\s*(import)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.import.tby"
				}
			},
			"end": "([0-9a-zA-Z_.]*)",
			"endCaptures": {
				"1": {
					"name": "entity.name.import.tby"
				}
			}
		},
		{
			"begin": "^\\s*(#include)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.include.tby"
				}
			},
			"end": "([\\<\"])\\s*([0-9a-zA-Z_\\\\.\/]*)([\\>\"])",
			"endCaptures": {
				"1": {
					"name": "string.quoted.double.tby"
				},
				"2": {
					"name": "string.quoted.double.tby"
				},
				"3": {
					"name": "string.quoted.double.tby"
				}
			}
		},
		{
			"match": "^\\s*(#flag)\\s+(.*?)$",
			"captures": {
				"1": {
					"name": "keyword.flag.tby"
				},
				"2": {
					"name": "string.quoted.double.tby"
				}
			}
		},
		{
			"include": "#comments"
		},
		{
			"include": "#generic"
		},
		{
			"include": "#operator"
		},
		{
			"include": "#function-new"
		},
		{
			"include": "#function-exist"
		},
		{
			"include": "#function-new-limited-overload"
		},
		{
			"include": "#function-new-extend"
		},
		{
			"comment": "Currently Unavaliable",
			"include": "#discard-go"
		},
		{
			"include": "#type"
		},
		{
			"include": "#enum"
		},
		{
			"include": "#struct"
		},
		{
			"include": "#interface"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#variable-assignment"
		},
		{
			"include": "#variable-increment"
		},
		{
			"include": "#variable-decrement"
		},
		{
			"include": "#label"
		},
		{
			"include": "#goto"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#std-type"
		},
		{
			"include": "#std-cbased-type"
		},
		{
			"include": "#number"
		},
		{
			"include": "#rawstring"
		},
		{
			"include": "#singlestring"
		},
		{
			"include": "#doublestring"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.other.comment.tby"
						}
					},
					"name": "comment.block.tby"
				},
				{
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.other.comment.tby"
						}
					},
					"end": "$",
					"name": "comment.line.double-slash.tby"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.tby",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"match": "\\.",
					"name": "punctuation.other.dot.tby"
				},
				{
					"match": "\\,",
					"name": "punctuation.other.comma.tby"
				},
				{
					"match": "\\:",
					"name": "punctuation.other.colon.tby"
				},
				{
					"match": "\\;",
					"name": "punctuation.other.semicolon.tby"
				},
				{
					"match": "\\?",
					"name": "punctuation.other.questionmark.tby"
				}
			]
		},
		"punctuation-bracket": {
			"patterns": [
				{
					"name": "punctuation.other.parent.begin.tby",
					"match": "\\("
				},
				{
					"name": "punctuation.other.parent.end.tby",
					"match": "\\)"
				},

				{
					"match": "\\<",
					"name": "punctuation.other.anglebracket.begin.tby"
				},
				{
					"match": "\\>",
					"name": "punctuation.other.anglebracket.end.tby"
				},

				{
					"name": "punctuation.other.squarebracket.begin.tby",
					"match": "\\["
				},
				{
					"name": "punctuation.other.squarebracket.end.tby",
					"match": "\\]"
				},

				{
					"name": "punctuation.other.curlybracket.begin.tby",
					"match": "\\{"
				},
				{
					"name": "punctuation.other.curlybracket.end.tby",
					"match": "\\}"
				}
			]
		},
		"punctuation-extend": {
			"patterns": [
				{
					"include": "#punctuation"
				},
				{
					"include": "#punctuation-bracket"
				}
			]
		},
		"generic": {
			"patterns": [
				{
					"match": "\\w+\\s*(\\<)([0-9a-zA-Z_]+)(\\>)",
					"captures": {
						"1": {
							"name": "punctuation.other.anglebracket.begin.tby"
						},
						"2": {
							"patterns": [
								{
									"match": "\\d\\w+",
									"name": "invalid.illegal.tby"
								},
								{
									"match": "\\w*",
									"name": "entity.name.generic.tby"
								}
							]
						},
						"3": {
							"name": "punctuation.other.anglebracket.end.tby"
						}
					}
				}
			]
		},
		"function-generic": {
			"patterns": [
				{
					"match": "(\\<)([0-9a-zA-Z_]+)(\\>)",
					"captures": {
						"1": {
							"name": "punctuation.other.anglebracket.begin.tby"
						},
						"2": {
							"patterns": [
								{
									"match": "\\d\\w+",
									"name": "invalid.illegal.tby"
								},
								{
									"match": "\\w*",
									"name": "entity.name.generic.tby"
								}
							]
						},
						"3": {
							"name": "punctuation.other.anglebracket.end.tby"
						}
					}
				}
			]
		},
		"variable-assignment": {
			"patterns": [
				{
					"match": "([0-9a-zA-Z_]+)\\s*(:=)\\s*(.+?)(?=(?:(?:\/\/|\/\\*).*)?$)",
					"captures": {
						"1": {
							"name": "variable.other.assignment.tby"
						},
						"2": {
							"name": "keyword.operator.assignment.tby"
						},
						"3": {
							"patterns": [
								{
									"include": "#generic"
								},
								{
									"include": "#constants"
								},
								{
									"include": "#storage"
								},	
								{
									"include": "#std-type"
								},
								{
									"include": "#std-cbased-type"
								},
								{
									"include": "#punctuation-extend"
								},
								{
									"include": "#function-exist"
								},
								{
									"include": "#singlestring"
								},
								{
									"include": "#doublestring"
								},
								{
									"include": "#number"
								}
							]
						}
					}
				}
			]
		},
		"variable-increment-decrement": {
			"patterns": [
				{
					"match": "([0-9a-zA-Z_]+)(\\+\\+)(?=)",
					"captures": {
						"1": {
							"name": "variable.other.increment.tby"
						},
						"2": {
							"name": "keyword.operator.increment.tby"
						}
					}
				},
				{
					"match": "([0-9a-zA-Z_]+)(\\-\\-)(?=)",
					"captures": {
						"1": {
							"name": "variable.other.decrement.tby"
						},
						"2": {
							"name": "keyword.operator.decrement.tby"
						}
					}
				}
			]
		},
		"function-new": {
			"patterns": [
				{
					"begin": "^\\s*(\\bfunc\\b)\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.function.tby"
						}
					},
					"end": "(?:(?:C\\.)?)([0-9a-zA-Z_]+)(\\<[0-9a-zA-Z_]+\\>)?(\\()(.*?)(\\))",
					"endCaptures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w+",
									"name": "invalid.illegal.tby"
								},
								{
									"match": "\\w*",
									"name": "entity.name.function.tby"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "#function-generic"
								}
							]
						},
						"3": {
							"name": "punctuation.other.parent.begin.tby"
						},
						"4": {
							"patterns": [
								{
									"include": "#generic"
								},
								{
									"include": "#storage"
								},
								{
									"include": "#std-type"
								},
								{
									"include": "#std-cbased-type"
								},
								{
									"include": "#punctuation"
								},
								{
									"include": "#punctuation-bracket"
								}
							]
						},
						"5": {
							"name": "punctuation.other.parent.end.tby"
						}
					}
				}
			]
		},
		"function-new-extend": {
			"patterns": [
				{
					"match": "^\\s*(\\bfn\\b)\\s*(\\()(.*?)(\\))\\s*(?:(?:C\\.)?)([0-9a-zA-Z_]+)(\\<[0-9a-zA-Z_]+\\>)?(\\()(.*?)(\\))",
					"captures": {
						"1": {
							"name": "keyword.function.tby"
						},
						"2": {
							"name": "punctuation.other.parent.begin.tby"
						},
						"3": {
							"patterns": [
								{
									"include": "#storage"
								},
								{
									"include": "#generic"
								},
								{
									"include": "#std-type"
								},
								{
									"include": "#std-cbased-type"
								},
								{
									"include": "#punctuation"
								},
								{
									"include": "#punctuation-bracket"
								}
							]
						},
						"4": {
							"name": "punctuation.other.parent.end.tby"
						},
						"5": {
							"patterns": [
								{
									"match": "\\d\\w+",
									"name": "invalid.illegal.tby"
								},
								{
									"match": "\\w*",
									"name": "entity.name.function.tby"
								}
							]
						},
						"6": {
							"patterns": [
								{
									"include": "#function-generic"
								}
							]
						},
						"7": {
							"name": "punctuation.other.parent.begin.tby"
						},
						"8": {
							"patterns": [
								{
									"include": "#punctuation-function"
								},
								{
									"include": "#storage"
								},
								{
									"include": "#generic"
								},
								{
									"include": "#std-type"
								},
								{
									"include": "#std-cbased-type"
								}
							]
						},
						"9": {
							"name": "punctuation.other.parent.end.tby"
						}
					}
				}
			]
		},
		"function-new-limited-overload": {
			"patterns": [
				{
					"match": "^\\s*(\\bfn\\b)\\s*(\\()(.+?)(\\))\\s*([\\+\\-\\*\/]?)\\s*(\\()(.+?)(\\))\\s*(?:(?:C\\.)?)([0-9a-zA-Z_]+)(\\<[0-9a-zA-Z_]+\\>)?",
					"captures": {
						"1": {
							"name": "keyword.function.tby"
						},
						"2": {
							"name": "punctuation.other.parent.begin.tby"
						},
						"3": {
							"patterns": [
								{
									"include": "#generic"
								},
								{
									"include": "#storage"
								},
								{
									"include": "#std-type"
								},
								{
									"include": "#std-cbased-type"
								},
								{
									"include": "#punctuation-extend"
								}
							]
						},
						"4": {
							"name": "punctuation.other.parent.end.tby"
						},
						"5": {
							"patterns": [
								{
									"include": "#operator"
								}
							]
						},
						"6": {
							"name": "punctuation.other.parent.begin.tby"
						},
						"7": {
							"patterns": [
								{
									"include": "#generic"
								},
								{
									"include": "#storage"
								},
								{
									"include": "#std-type"
								},
								{
									"include": "#std-cbased-type"
								},
								{
									"include": "#punctuation-extend"
								}
							]
						},	
						"8": {
							"name": "punctuation.other.parent.end.tby"
						},
						"9": {
							"patterns": [
								{
									"match": "\\d\\w+",
									"name": "invalid.illegal.tby"
								},
								{
									"match": "\\w*",
									"name": "entity.name.function.tby"
								}
							]
						},
						"10": {
							"patterns": [
								{
									"include": "#function-generic"
								}
							]
						}
					}
				}
			]
		},
		"function-exist": {
			"patterns": [
				{
					"match": "([0-9a-zA-Z_]+)([\\w\\<\\>]*)\\s*(\\()(.*?)(\\)\\s*$)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w+",
									"name": "invalid.illegal.tby"
								},
								{
									"match": "\\w*",
									"name": "support.function.tby"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "#function-generic"
								}
							]
						},
						"3": {
							"name": "punctuation.other.parent.begin.tby"
						},
						"4": {
							"patterns": [
								{
									"include": "#generic"
								},
								{
									"include": "#storage"
								},
								{
									"include": "#operator"
								},
								{
									"include": "#std-type"
								},
								{
									"include": "#std-cbased-type"
								},
								{
									"include": "#singlestring"
								},
								{
									"include": "#doublestring"
								},
								{
									"include": "#number"
								},
								{
									"include": "$self"
								}
							]
						},
						"5": {
							"name": "punctuation.other.parent.end.tby"
						}
					}
				}
			]
		},
		"label": {
			"comment": "Current unavaliable",
			"patterns": [
				{
					"match": "^\\s*(default)([0-9a-zA-Z_]+)(:)",
					"captures": {
						"1": {
							"patterns": [
								{
									"name": "invalid.illegal.tby",
									"match": "\\d\\w+"
								},
								{
									"name": "entity.name.label.tby",
									"match": "\\w*"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"name": "entity.name.label.tby",
									"match": "\\w*"
								}
							]
						},
						"3": {
							"name": "punctuation.other.colon.tby"
						}
					}
				},
				{
					"match": "^\\s*(\\bgoto\\b)\\s+([0-9a-zA-Z_]+)",
					"captures": {
						"1": {
							"name": "keyword.control.tby"
						},
						"2": {
							"patterns": [
								{
									"name": "invalid.illegal.tby",
									"match": "\\d\\w+"
								},
								{
									"name": "entity.name.label.tby",
									"match": "\\w*"
								}
							]
						}
					}
				}
			]
		},
		"type": {
			"patterns": [
				{
					"comment": "Type definition",
					"match": "^\\s*(\\btype\\b)\\s+([0-9a-zA-Z_.]*)\\s*([0-9a-zA-Z_.]*)",
					"captures": {
						"1": {
							"name": "keyword.type.tby"
						},
						"2": {
							"patterns": [
								{
									"name": "invalid.illegal.tby",
									"match": "\\d\\w+"
								},
								{
									"name": "entity.name.type.tby",
									"match": "\\w*"
								}
							]
						},
						"3": {
							"patterns": [
								{
									"name": "invalid.illegal.tby",
									"match": "\\d\\w+"
								},
								{
									"name": "entity.name.type.tby",
									"match": "\\w*"
								}
							]
						}
					}
				}
			]
		},
		"enum": {
			"patterns": [
				{
					"comment": "Enumeration",
					"match": "^\\s*(\\benum\\b)\\s+([0-9a-zA-Z_.]*)",
					"captures": {
						"1": {
							"name": "keyword.enum.tby"
						},
						"2": {
							"patterns": [
								{
									"name": "invalid.illegal.tby",
									"match": "\\d\\w+"
								},
								{
									"name": "entity.name.enum.tby",
									"match": "\\w*"
								}
							]
						}
					}
				}
			]
		},
		"struct": {
			"patterns": [
				{
					"comment": "Structure",
					"match": "^\\s*(\\bstruct\\b)\\s+([0-9a-zA-Z_.]*)",
					"captures": {
						"1": {
							"name": "keyword.struct.tby"
						},
						"2": {
							"patterns": [
								{
									"name": "invalid.illegal.tby",
									"match": "\\d\\w+"
								},
								{
									"name": "entity.name.struct.tby",
									"match": "\\w*"
								}
							]
						}
					}
				}
			]
		},
		"interface": {
			"patterns": [
				{
					"comment": "Interface",
					"match": "^\\s*(\\binterface\\b)\\s+([0-9a-zA-Z_.]*)",
					"captures": {
						"1": {
							"name": "keyword.interface.tby"
						},
						"2": {
							"patterns": [
								{
									"name": "invalid.illegal.tby",
									"match": "\\d\\w+"
								},
								{
									"name": "entity.name.interface.tby",
									"match": "\\w*"
								}
							]
						}
					}
				}
			]
		},
		"std-type": {
			"patterns": [
				{
					"name": "storage.type.boolean.tby",
					"match": "\\bbool\\b"
				},
				{
					"name": "storage.type.byte.tby",
					"match": "\\bbyte\\b"
				},
				{
					"name": "storage.type.byteptr.tby",
					"match": "\\bbyteptr\\b"
				},
				{
					"name": "storage.type.intptr.tby",
					"match": "\\bintptr\\b"
				},
				{
					"name": "storage.type.tbyoidptr.tby",
					"match": "\\bvoidptr\\b"
				},
				{
					"name": "storage.type.string.tby",
					"match": "\\bstring\\b"
				},
				{
					"name": "storage.type.ustring.tby",
					"match": "\\bustring\\b"
				},
				{
					"name": "storage.type.rune.tby",
					"match": "\\brune\\b"
				},
				{
					"name": "storage.type.option.tby",
					"match": "\\boption\\b"
				},
				{
					"name": "storage.type.numeric.tby",
					"match": "\\b(int|uint|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64)\\b"
				}
			]
		},
		"std-cbased-type": {
			"patterns": [
				{
					"name": "storage.type.numeric.cbased.tby",
					"match": "\\b(size_t|ptrdiff_t)\\b"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"comment": "Arithmethic operators",
					"name": "keyword.operator.arithmethic.tby",
					"match": "(\\+|\\-|\\*|\\/|\\%|\\+\\+|\\-\\-)"
				},
				{
					"comment": "Relation operators",
					"name": "keyword.operator.relation.tby",
					"match": "(\\=\\=|\\!\\=|\\>|\\<|\\>\\=|\\<\\=)"
				},
				{
					"comment": "Logical operators",
					"name": "keyword.operator.logical.tby",
					"match": "(\\&\\&|\\|\\||\\!)"
				},
				{
					"comment": "Bitwise operators",
					"name": "keyword.operator.bitwise.tby",
					"match": "(\\&|\\||\\^|\\<\\<|\\>\\>)"
				},
				{
					"comment": "Assignment  operators",
					"name": "keyword.operator.assignment.tby",
					"match": "(\\:\\=|\\=|\\+\\=|\\-\\=|\\*\\=|\\/\\=|\\%\\=|\\&\\=|\\|\\=|\\^\\=|\\&\\&\\=|\\|\\|\\=|\\>\\>\\=|\\<\\<\\=)"
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"comment": "Keyword Control",
					"name": "keyword.control.tby",
					"match": "\\b(in|or|break|continue|switch|case|default|match|if|else|for|go|goto|defer|return)\\b"
				},
				{
					"comment": "Keyword Control Specific",
					"name": "keyword.control.tby",
					"match": "(\\$if)"
				},
				{
					"comment": "Keyword Type",
					"name": "keyword.type.tby",
					"match": "\\btype\\b"
				},
				{
					"comment": "Keyword Based Enumeration",
					"name": "keyword.enum.tby",
					"match": "\\benum\\b"
				},
				{
					"comment": "Keyword Based Structure",
					"name": "keyword.struct.tby",
					"match": "\\bstruct\\b"
				},
				{
					"comment": "Keyword Based Interface",
					"name": "keyword.interface.tby",
					"match": "\\binterface\\b"
				},
				{
					"comment": "Keyword Extended Map",
					"name": "keyword.map.tby",
					"match": "\\bmap\\b"
				},
				{
					"comment": "Keyword Extended Assert",
					"name": "keyword.assert.tby",
					"match": "\\bassert\\b"
				},
				{
					"comment": "Keyword Extended Sizeof",
					"name": "keyword.sizeof.tby",
					"match": "\\bsizeof\\b"
				}
			]
		},
		"storage": {
			"patterns": [
				{
					"name": "storage.modifier.tby",
					"match": "\\b(const|mut|pub)\\b"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"match": "([-]?)([0-9e]*)([.]){1}([0-9]+)",
					"captures": {
						"1": {
							"name": "constant.numeric.float.tby"
						},
						"2": {
							"name": "constant.numeric.float.tby"
						},
						"3": {
							"name": "constant.numeric.float.tby"
						},
						"4": {
							"name": "constant.numeric.float.tby"
						}
					}
				},
				{
					"match": "(0[xX])([0-9a-fA-F]+)",
					"captures": {
						"1": {
							"name": "constant.numeric.hex.tby"
						},
						"2": {
							"name": "constant.numeric.hex.tby"
						}
					}
				},
				{
					"match": "\\b([-]?)([0-9]+)",
					"captures": {
						"1": {
							"name": "constant.numeric.integer.tby"
						},
						"2": {
							"name": "constant.numeric.integer.tby"
						}
					}
				}
			]
		},
		"rawstring": {
			"begin": "\\`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.tby"
				}
			},
			"end": "\\`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.tby"
				}
			},
			"name": "string.quoted.raw.tby",
			"patterns": [
				{
					"include": "#string-escaped-char"
				},
				{
					"include": "#string-placeholder"
				}
			]
		},
		"singlestring": {
			"begin": "\\'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.tby"
				}
			},
			"end": "\\'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.tby"
				}
			},
			"name": "string.quoted.single.tby",
			"patterns": [
				{
					"include": "#string-escaped-char"
				},
				{
					"include": "#string-placeholder"
				}
			]
		},
		"doublestring": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.tby"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.tby"
				}
			},
			"name": "string.quoted.double.tby",
			"patterns": [
				{
					"include": "#string-escaped-char"
				},
				{
					"include": "#string-placeholder"
				}
			]
		},
		"string-escaped-char": {
			"patterns": [
				{
					"match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
					"name": "constant.character.escape.tby"
				},
				{
					"match": "\\\\[^0-7xuUabfnrtv\\'\"]",
					"name": "invalid.illegal.unknown-escape.tby"
				}
			]
		},
		"string-placeholder": {
			"patterns": [
				{
					"match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]",
					"name": "constant.other.placeholder.tby"
				}
			]
		}
	}
}
